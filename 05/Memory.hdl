// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // If address[14] == 1,                     sel => screen
    // If address[14] == 1 && address[13] == 1, sel => kbd
    // Else =>                                  sel => RAM

    // sel=address[13..14];
    // 0 0 =>   RAM
    // 0 1 =>   RAM
    // 1 0 =>   screen
    // 1 1 =>   kbd
    DMux4Way(in=load, sel=address[13..14],
        a=loadRam1, 
        b=loadRam2, 
        c=loadScreen, 
        d=loadKbd);
    Or(a=loadRam1, b=loadRam2, out=loadRam);

    Keyboard(out=kbd);
    Screen(in=in, load=loadScreen, address=address[0..12], out=screen);
	RAM16K(in=in, load=loadRam, address=address[0..13], out=ram);

    // Check for invalid address
    // Check if the first 12 bits of addr are zero
    Or8Way(in=address[0..7], out=firstByteNonZero);
    Or8Way(in[0..4]=address[8..12], out=secondByteNonZero);
    Or(a=firstByteNonZero, b=secondByteNonZero, out=addrIsNotZero);

    // If loadKbd && addrIsNotZero, then addr > 0x6000. we need to output zero for invalid addr.
    And(a=loadKbd, b=addrIsNotZero, out=invalidAddr);

    // Use mux8way to control for invalid addresses. 
    Mux8Way16(a=ram, b=ram, c=screen, d=kbd,
        sel[0..1]=address[13..14],  
        sel[2]=invalidAddr,         // Implicitly output zero for e,f,g,h when invalid addr is set.
        out=out);
}